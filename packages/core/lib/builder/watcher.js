const path = require("path");
const chokidar = require("chokidar");
require("colors");
const debug = require("debug")("core");
const ISDEV = process.env.NODE_ENV !== "production";
const slash = require("../utils/fixPathSlashes");

module.exports = async (options, onWatchUpdate) => {
  var isWatching = false;
  const sourcePath = options.sourcePath;

  const add = from => {
    from = slash(from);
    const relativePath = path.relative(sourcePath, from);
    if (
      relativePath.indexOf("node_modules") !== -1 ||
      relativePath.indexOf(".git") !== -1 ||
      relativePath === "yarn.lock" ||
      relativePath === "package.json" // pkg.json is generated by installPackages.js
    ) {
      return;
    }

    // don't trigger for zero-builds folder (only in dev mode)
    if (ISDEV && relativePath.indexOf("zero-builds") !== -1) {
      return;
    }
    debug("[ADD]".yellow, from);
    if (isWatching && onWatchUpdate) onWatchUpdate("add", from);
  };
  const remove = from => {
    from = slash(from);
    const relativePath = path.relative(sourcePath, from);
    if (
      relativePath.indexOf("node_modules") !== -1 ||
      relativePath.indexOf("zero-builds") !== -1
    ) {
      return;
    }
    debug("[REM]".yellow, from);
    if (isWatching && onWatchUpdate) onWatchUpdate("remove", from);
  };

  // watch
  if (options.watch) {
    // chokidar glob doesn't work with backward slashes
    chokidar
      .watch(slash(path.join(sourcePath, "/**/*")), {
        ignoreInitial: true,
        ignored: "**/node_modules/**"
      })
      .on("ready", () => {
        debug("[WATCHING]".yellow, sourcePath);
        isWatching = true;
        if (onWatchUpdate) onWatchUpdate("ready");
      })
      .on("add", add)
      .on("addDir", add)
      .on("change", add)
      .on("unlink", remove)
      .on("unlinkDir", remove)
      .on("error", e => debug("[ERROR]".red, e));
  } else if (onWatchUpdate) {
    onWatchUpdate("ready");
  }
};
